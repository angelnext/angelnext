---
interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const { title = 'AngelNext', description = 'The personal site of AngelNext' } = Astro.props;
---

<meta charset='UTF-8' />
<meta name='title' property='og:title' content={title} />
<meta name='description' property='og:description' content={description} />
<meta property='og:site_name' content='AngelNext' />
<meta property='og:url' content='https://angelnext.dev/' />
<meta property='og:image' content='/banner.png' />
<meta property='og:image:width' content='1200' />
<meta property='og:image:height' content='630' />
<meta name='keywords' content='AngelNext, Portfolio, Developer, Programmer' />
<meta name='author' content='Angel G. Vazquez' />
<meta name='viewport' content='width=device-width' />
<meta name='generator' content={Astro.generator} />
<title>{title}</title>

<link rel='icon' type='image/svg+xml' href='/favicon.svg' />

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};

	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
